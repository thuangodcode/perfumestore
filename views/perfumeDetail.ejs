<div class="perfume-detail-container">
  <a href="/" class="back-button">Back to Products</a>

  <div class="perfume-detail-grid">

    <div class="perfume-image-section">
      <img src="<%= perfume.uri %>" alt="<%= perfume.perfumeName %>">
    </div>


    <div class="perfume-info-section">
      <h1>
        <%= perfume.perfumeName %>
      </h1>
      <p class="perfume-brand">
        <%= perfume.brand ? perfume.brand.brandName : 'Unknown Brand' %>
      </p>
      <div class="perfume-price">
        <%= perfume.price %> VND
      </div>
      <p class="perfume-description">
        <%= perfume.description %>
      </p>

      Specifications Grid
      <div class="specs-grid">
        <div class="spec-item">
          <div class="spec-label">Concentration</div>
          <div class="spec-value">
            <%= perfume.concentration %>
          </div>
        </div>
        <div class="spec-item">
          <div class="spec-label">Volume</div>
          <div class="spec-value">
            <%= perfume.volume %>ml
          </div>
        </div>
        <div class="spec-item">
          <div class="spec-label">Target Audience</div>
          <div class="spec-value">
            <%= perfume.targetAudience %>
          </div>
        </div>
        <div class="spec-item">
          <div class="spec-label">Ingredients</div>
          <div class="spec-value">
            <%= perfume.ingredients %>
          </div>
        </div>
      </div>
    </div>
  </div>


  <div class="comments-section">
    <h2>Reviews & Ratings</h2>

    Average Rating Display
    <% if (perfume.comments && perfume.comments.length> 0) { %>
      <% let total=perfume.comments.reduce((sum, c)=> sum + c.rating, 0);
        let avgRating = (total / perfume.comments.length).toFixed(1);
        %>
        <div class="average-rating">
          <div class="rating-number">
            <%= avgRating %>
          </div>
          <div class="rating-details">
            <div class="stars">
              <% for(let i=1; i <=3; i++) { %>
                <span class="star <%= i <= Math.round(avgRating) ? '' : 'empty' %>">★</span>
                <% } %>
            </div>
            <div class="review-count">
              <%= perfume.comments.length %>
                <%= perfume.comments.length===1 ? 'review' : 'reviews' %>
            </div>
          </div>
        </div>

        Comments List
        <div class="comments-list">
          <% perfume.comments.forEach(c=> { %>
            <div class="comment-card">
              <div class="comment-header">
                <span class="comment-author">
                  <%= c.author ? c.author.name : 'Anonymous' %>
                </span>
                <div class="comment-rating">
                  <% for(let i=1; i <=3; i++) { %>
                    <span class="star <%= i <= c.rating ? '' : 'empty' %>">★</span>
                    <% } %>
                </div>
              </div>
              <p class="comment-content">
                <%= c.content %>
              </p>


              <% if (user && c.author && c.author._id.toString()===user._id.toString()) { %>
                <div class="comment-actions">
                  <button type="button" class="btn-small edit-btn"
                    onclick="openEditModal('<%= c._id %>', '<%= c.content.replace(/'/g, " \\'") %>', <%= c.rating %>)">
                      Edit
                  </button>

                  <button type="button" class="btn-small btn-danger-small"
                    onclick="openDeleteModal('<%= c._id %>')">Delete</button>
                </div>
                <% } %>
            </div>
            <% }) %>
        </div>
        <% } else { %>
          <p class="no-comments">No reviews yet. Be the first to review this perfume!</p>
          <% } %>
  </div>


  <% if (user) { %>
    <% const hasCommented=perfume.comments && perfume.comments.some(c=> c.author && c.author._id.toString() ===
      user._id.toString()); %>

      <% if (!hasCommented) { %>
        <div class="feedback-section">
          <h3>Leave a Review</h3>
          <form id="reviewForm" method="POST" action="/perfume/<%= perfume._id %>/comments">
            <div class="form-group">
              <label>Your Rating</label>
              <div class="rating-input">
                <input type="radio" name="rating" value="1" id="star1" required>
                <label for="star1">★</label>
                <input type="radio" name="rating" value="2" id="star2">
                <label for="star2">★</label>
                <input type="radio" name="rating" value="3" id="star3">
                <label for="star3">★</label>
              </div>
            </div>

            <div class="form-group">
              <label>Your Review</label>
              <textarea name="content" id="reviewContent" rows="5"
                placeholder="Share your thoughts about this perfume..." required></textarea>
            </div>

            <button type="button" class="btn-primary" onclick="openSubmitModal()">Submit Review</button>
          </form>
        </div>
        <% } else { %>
          <div class="already-reviewed">
            <p>You've already reviewed this perfume</p>
          </div>
          <% } %>
            <% } else { %>
              <div class="login-prompt">
                <p>Want to leave a review?</p>
                <a href="/login?redirect=/perfume/<%= perfume._id %>">Login to Continue</a>
              </div>
              <% } %>
</div>

<!-- Added toast notification container -->
<div id="toastContainer"></div>


<div id="deleteModal" class="modal-overlay">
  <div class="modal">
    <div class="modal-header">
      <h3>Delete Review</h3>
    </div>
    <div class="modal-body">
      Are you sure you want to delete this review? This action cannot be undone.
    </div>
    <div class="modal-actions">
      <button type="button" class="btn-cancel" onclick="closeDeleteModal()">Cancel</button>
      <button type="button" class="btn-confirm danger" onclick="confirmDelete()">Delete</button>
    </div>
  </div>
</div>


<div id="editModal" class="modal-overlay">
  <div class="modal edit-modal">
    <div class="modal-header">
      <h3>Edit Review</h3>
    </div>
    <form id="editForm" method="POST">
      <div class="form-group">
        <label>Your Rating</label>
        <div class="rating-input" id="editRatingInput">
          <input type="radio" name="rating" value="1" id="editStar1" required>
          <label for="editStar1">★</label>
          <input type="radio" name="rating" value="2" id="editStar2">
          <label for="editStar2">★</label>
          <input type="radio" name="rating" value="3" id="editStar3">
          <label for="editStar3">★</label>
        </div>
      </div>
      <div class="form-group">
        <label>Your Review</label>
        <textarea name="content" id="editContent" rows="5" required></textarea>
      </div>
      <div class="modal-actions">
        <button type="button" class="btn-cancel" onclick="closeEditModal()">Cancel</button>
        <button type="submit" class="btn-confirm">Save Changes</button>
      </div>
    </form>
  </div>
</div>


<div id="submitModal" class="modal-overlay">
  <div class="modal">
    <div class="modal-header">
      <h3>Submit Review</h3>
    </div>
    <div class="modal-body">
      Are you sure you want to submit this review? You can edit or delete it later.
    </div>
    <div class="modal-actions">
      <button type="button" class="btn-cancel" onclick="closeSubmitModal()">Cancel</button>
      <button type="button" class="btn-confirm" onclick="confirmSubmit()">Submit</button>
    </div>
  </div>
</div>

<script>
  function showToast(message, type = 'success') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;

    container.appendChild(toast);

    // Auto-hide after 3 seconds
    setTimeout(() => {
      toast.classList.add('hide');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, 3000);
  }

  // Star rating interaction for new review
  const ratingInputs = document.querySelectorAll('.feedback-section .rating-input input[type="radio"]');
  const ratingLabels = document.querySelectorAll('.feedback-section .rating-input label');

  if (ratingLabels.length > 0) {
    ratingLabels.forEach((label, index) => {
      label.addEventListener('mouseenter', () => {
        ratingLabels.forEach((l, i) => {
          l.style.color = i <= index ? '#fbbf24' : '#404040';
        });
      });
    });

    document.querySelector('.feedback-section .rating-input').addEventListener('mouseleave', () => {
      const checkedInput = document.querySelector('.feedback-section .rating-input input[type="radio"]:checked');
      if (checkedInput) {
        const checkedIndex = Array.from(ratingInputs).indexOf(checkedInput);
        ratingLabels.forEach((l, i) => {
          l.style.color = i <= checkedIndex ? '#fbbf24' : '#404040';
        });
      } else {
        ratingLabels.forEach(l => l.style.color = '#404040');
      }
    });
  }

  // Star rating interaction for edit modal
  const editRatingLabels = document.querySelectorAll('#editRatingInput label');
  if (editRatingLabels.length > 0) {
    editRatingLabels.forEach((label, index) => {
      label.addEventListener('mouseenter', () => {
        editRatingLabels.forEach((l, i) => {
          l.style.color = i <= index ? '#fbbf24' : '#404040';
        });
      });
    });

    document.querySelector('#editRatingInput').addEventListener('mouseleave', () => {
      const checkedInput = document.querySelector('#editRatingInput input[type="radio"]:checked');
      if (checkedInput) {
        const checkedIndex = Array.from(document.querySelectorAll('#editRatingInput input[type="radio"]')).indexOf(checkedInput);
        editRatingLabels.forEach((l, i) => {
          l.style.color = i <= checkedIndex ? '#fbbf24' : '#404040';
        });
      } else {
        editRatingLabels.forEach(l => l.style.color = '#404040');
      }
    });
  }

  // Delete Modal Functions
  let deleteCommentId = null;

  function openDeleteModal(commentId) {
    deleteCommentId = commentId;
    document.getElementById('deleteModal').classList.add('active');
  }

  function closeDeleteModal() {
    document.getElementById('deleteModal').classList.remove('active');
    deleteCommentId = null;
  }

  function confirmDelete() {
    if (deleteCommentId) {
      showToast('Review deleted successfully');

      const form = document.createElement('form');
      form.method = 'POST';
      form.action = `/perfume/<%= perfume._id %>/comments/${deleteCommentId}/delete`;
      document.body.appendChild(form);

      // Delay submission to show toast
      setTimeout(() => {
        form.submit();
      }, 500);
    }
  }

  // Edit Modal Functions
  function openEditModal(commentId, content, rating) {
    document.getElementById('editContent').value = content;
    document.getElementById('editForm').action = `/perfume/<%= perfume._id %>/comments/${commentId}/edit`;

    // Set the rating
    const ratingInput = document.querySelector(`#editRatingInput input[value="${rating}"]`);
    if (ratingInput) {
      ratingInput.checked = true;
      // Update star colors
      const editLabels = document.querySelectorAll('#editRatingInput label');
      editLabels.forEach((l, i) => {
        l.style.color = i < rating ? '#fbbf24' : '#404040';
      });
    }

    document.getElementById('editModal').classList.add('active');
  }

  function closeEditModal() {
    document.getElementById('editModal').classList.remove('active');
  }

  document.getElementById('editForm').addEventListener('submit', function (e) {
    e.preventDefault();
    showToast('Review updated successfully');

    // Delay submission to show toast
    setTimeout(() => {
      this.submit();
    }, 500);
  });

  // Submit Review Modal Functions
  function openSubmitModal() {
    const form = document.getElementById('reviewForm');
    if (form.checkValidity()) {
      document.getElementById('submitModal').classList.add('active');
    } else {
      form.reportValidity();
    }
  }

  function closeSubmitModal() {
    document.getElementById('submitModal').classList.remove('active');
  }

  function confirmSubmit() {
    showToast('Review submitted successfully');

    // Delay submission to show toast
    setTimeout(() => {
      document.getElementById('reviewForm').submit();
    }, 500);
  }

  // Close modals on outside click
  document.querySelectorAll('.modal-overlay').forEach(overlay => {
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        overlay.classList.remove('active');
      }
    });
  });

  // Close modals on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      document.querySelectorAll('.modal-overlay').forEach(overlay => {
        overlay.classList.remove('active');
      });
    }
  });
</script>